#!/usr/bin/env php
<?php
/**
 * Database Configuration Setup Script
 * 
 * This script helps users create their database configuration file
 * from the example template.
 */

echo "=================================================\n";
echo "Stock Analysis System - Database Configuration\n";
echo "=================================================\n\n";

// Check if config file already exists
$configFiles = ['db_config.yml', 'db_config.yaml', 'db_config.ini'];
$existingConfig = null;

foreach ($configFiles as $file) {
    if (file_exists($file)) {
        $existingConfig = $file;
        break;
    }
}

if ($existingConfig) {
    echo "⚠️  Configuration file '{$existingConfig}' already exists.\n";
    echo "Do you want to overwrite it? (y/N): ";
    $overwrite = trim(fgets(STDIN));
    
    if (strtolower($overwrite) !== 'y') {
        echo "Setup cancelled.\n";
        exit(0);
    }
}

// Check for example file
if (!file_exists('db_config.example.yml')) {
    echo "❌ Example configuration file 'db_config.example.yml' not found.\n";
    echo "Please ensure you're running this script from the project root directory.\n";
    exit(1);
}

echo "This script will help you create your database configuration.\n\n";

// Collect database information
echo "📊 Database Configuration:\n";
echo "-------------------------\n";

echo "Database Host (default: localhost): ";
$host = trim(fgets(STDIN));
if (empty($host)) $host = 'localhost';

echo "Database Port (default: 3306): ";
$port = trim(fgets(STDIN));
if (empty($port)) $port = '3306';

echo "Database Username: ";
$username = trim(fgets(STDIN));

echo "Database Password: ";
$password = trim(fgets(STDIN));

echo "Micro-cap Database Name (default: micro_cap_trading): ";
$microCapDb = trim(fgets(STDIN));
if (empty($microCapDb)) $microCapDb = 'micro_cap_trading';

echo "Legacy Database Name (default: stock_market_2): ";
$legacyDb = trim(fgets(STDIN));
if (empty($legacyDb)) $legacyDb = 'stock_market_2';

// Optional API keys
echo "\n🔑 API Configuration (optional):\n";
echo "--------------------------------\n";

echo "Alpha Vantage API Key (optional): ";
$alphaVantageKey = trim(fgets(STDIN));

echo "Twelve Data API Key (optional): ";
$twelveDataKey = trim(fgets(STDIN));

// Application settings
echo "\n⚙️  Application Settings:\n";
echo "------------------------\n";

echo "Enable Debug Mode? (y/N): ";
$debugMode = strtolower(trim(fgets(STDIN))) === 'y' ? 'true' : 'false';

echo "Timezone (default: America/New_York): ";
$timezone = trim(fgets(STDIN));
if (empty($timezone)) $timezone = 'America/New_York';

// Create configuration content
$configContent = <<<YAML
# Database Configuration
# Generated by setup script on {date}

database:
  host: {$host}
  port: {$port}
  username: {$username}
  password: {$password}
  charset: utf8mb4
  
  # Micro-cap specific database
  micro_cap:
    database: {$microCapDb}
    
  # Legacy stock analysis database  
  legacy:
    database: {$legacyDb}
    
# API Configuration (for external data sources)
apis:
  alpha_vantage:
    api_key: {$alphaVantageKey}
    
  yahoo_finance:
    enabled: true
    
  twelve_data:
    api_key: {$twelveDataKey}

# Application Settings
app:
  debug: {$debugMode}
  timezone: {$timezone}
  cache_enabled: true
  
# Logging
logging:
  level: INFO
  file: logs/stock_analysis.log
YAML;

$configContent = str_replace('{date}', date('Y-m-d H:i:s'), $configContent);

// Write configuration file
$configFile = 'db_config.yml';
if (file_put_contents($configFile, $configContent) === false) {
    echo "❌ Failed to write configuration file.\n";
    exit(1);
}

echo "\n✅ Configuration file created successfully: {$configFile}\n\n";

// Test database connection
echo "🔍 Testing database connections...\n";

try {
    require_once 'DatabaseConfig.php';
    
    // Test micro-cap connection
    echo "Testing micro-cap database connection... ";
    try {
        $microCapPdo = DatabaseConfig::createMicroCapConnection();
        echo "✅ Success\n";
    } catch (Exception $e) {
        echo "❌ Failed: " . $e->getMessage() . "\n";
    }
    
    // Test legacy connection
    echo "Testing legacy database connection... ";
    try {
        $legacyPdo = DatabaseConfig::createLegacyConnection();
        echo "✅ Success\n";
    } catch (Exception $e) {
        echo "❌ Failed: " . $e->getMessage() . "\n";
    }
    
} catch (Exception $e) {
    echo "❌ Error loading configuration: " . $e->getMessage() . "\n";
}

echo "\n📝 Next Steps:\n";
echo "1. Ensure your databases exist and are accessible\n";
echo "2. Run any necessary database migrations/imports\n";
echo "3. Test the application with your new configuration\n";
echo "4. The configuration file is automatically ignored by git\n\n";

echo "🎉 Setup complete! Your Stock Analysis System is ready to use.\n";
