<?php
/**
 * PortfolioSOAPService: SOAP API for PortfolioDAO (all portfolio types)
 * WSDL will be auto-generated by PHP's SoapServer
 */

require_once __DIR__ . '/PortfolioDAO.php';
require_once __DIR__ . '/TradeLogDAO.php';
require_once __DIR__ . '/DbConfigClasses.php';

class PortfolioSOAPService {
    /**
     * Read the latest portfolio for a given type (micro, blue-chip, small-cap, etc.)
     * @param string $type
     * @return array
     */

    public function readPortfolio($type) {
        $info = $this->getPortfolioInfo($type);
        $dao = new PortfolioDAO($info['csv'], $info['table'], $info['dbclass']);
        return $dao->readPortfolio();
    }

    public function readTradeLog($type, $filters = []) {
        $info = $this->getTradeLogInfo($type);
        $dao = new TradeLogDAO($info['csv'], $info['table'], $info['dbclass']);
        return $dao->readTradeLog($filters);
    }

    /**
     * Write a portfolio for a given type
     * @param string $type
     * @param array $rows
     * @return bool
     */

    public function writePortfolio($type, $rows) {
        $info = $this->getPortfolioInfo($type);
        $dao = new PortfolioDAO($info['csv'], $info['table'], $info['dbclass']);
        return $dao->writePortfolio($rows);
    }

    public function writeTradeLog($type, $rows) {
        $info = $this->getTradeLogInfo($type);
        $dao = new TradeLogDAO($info['csv'], $info['table'], $info['dbclass']);
        return $dao->writeTradeLog($rows);
    }

    /**
     * Get errors from last operation
     * @param string $type
     * @return array
     */

    public function getErrors($type, $logType = 'portfolio') {
        if ($logType === 'trade') {
            $info = $this->getTradeLogInfo($type);
            $dao = new TradeLogDAO($info['csv'], $info['table'], $info['dbclass']);
            return $dao->getErrors();
        } else {
            $info = $this->getPortfolioInfo($type);
            $dao = new PortfolioDAO($info['csv'], $info['table'], $info['dbclass']);
            return $dao->getErrors();
        }
    }

    private function getPortfolioInfo($type) {
    // ...existing code...
}

// Helper for trade log info (must be outside class due to PHP syntax error)
function getTradeLogInfo($type) {
    $type = strtolower($type);
    switch ($type) {
        case 'micro':
            return [
                'csv' => '../Scripts and CSV Files/chatgpt_trade_log.csv',
                'table' => 'trade_log',
                'dbclass' => 'MicroCapDatabaseConfig',
            ];
        case 'blue-chip':
            return [
                'csv' => '../Scripts and CSV Files/blue_chip_cap_trade_log.csv',
                'table' => 'trade_log',
                'dbclass' => 'LegacyDatabaseConfig',
            ];
        default:
            throw new Exception('Unknown trade log type');
    }
}
        $type = strtolower($type);
        switch ($type) {
            case 'micro':
                return [
                    'csv' => '../data_micro_cap/micro_cap_portfolio.csv',
                    'table' => 'portfolio_data',
                    'dbclass' => 'MicroCapDatabaseConfig',
                ];
            case 'blue-chip':
                return [
                    'csv' => '../data_blue_chip/blue_chip_cap_portfolio.csv',
                    'table' => 'portfolios_blue_chip',
                    'dbclass' => 'LegacyDatabaseConfig',
                ];
            case 'small':
            case 'small-cap':
                return [
                    'csv' => '../data_small_cap/small_cap_portfolio.csv',
                    'table' => 'portfolios_small_cap',
                    'dbclass' => 'LegacyDatabaseConfig',
                ];
            default:
                throw new Exception('Unknown portfolio type');
        }
    }
}

// SOAP server endpoint
if (php_sapi_name() !== 'cli') {
    ini_set('soap.wsdl_cache_enabled', 0);
    $wsdl = null; // Let PHP auto-generate WSDL
    $server = new SoapServer($wsdl, ['uri' => 'http://localhost/portfolio_soap_service']);
    $server->setClass('PortfolioSOAPService');
    $server->handle();
}
